AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Twitter Following Tracker

Globals:
  Function:
    Runtime: nodejs16.x
    Handler: index.handler
    MemorySize: 128
    Layers:
      - !Ref ShareLibraryLayer
    Environment:
      Variables:
        TABLE_NAME: !Ref TrackingUserTable
        BEARER_TOKEN : !Ref BearerToken
        TWITTER_AUTHORIZATION_SCHEDULE: !Ref TwitterAuthorizationSchedule
        TWITTER_AUTHORIZATION_CRUD: !Ref TwitterAuthorizationCrud
        X_CSRF_TOKEN_SCHEDULE: !Ref XCsrfTokenSchedule
        X_CSRF_TOKEN_CRUD: !Ref XCsrfTokenCrud
        COOKIE_AUTH_TOKEN_SCHEDULE: !Ref CookieAuthTokenSchedule
        COOKIE_AUTH_TOKEN_CRUD: !Ref CookieAuthTokenCrud
        TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
Parameters:
  BearerToken:
    Type: String
  TwitterAuthorizationSchedule:
    Type: String
  TwitterAuthorizationCrud:
    Type: String
  XCsrfTokenSchedule:
    Type: String
  XCsrfTokenCrud:
    Type: String
  CookieAuthTokenSchedule:
    Type: String
  CookieAuthTokenCrud:
    Type: String
  TelegramBotToken:
    Type: String

Resources:
  TrackingUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        # - AttributeName: createTime
        #   AttributeType: S
        - AttributeName: victimType
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: trackingIndex
          KeySchema:
          - AttributeName: victimType
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

##################################################################################
  ShareLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dist/common
      RetentionPolicy : Delete
    Metadata:
      BuildMethod: nodejs16.x

##################################################################################
  ApiGatewayApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: DEV
      CorsConfiguration:
        AllowMethods: 
          - "*"
        AllowHeaders: 
          - "*"
        AllowOrigins:
          - "*"

##################################################################################
  preflightFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri : dist/public/preflight
      Events:
        OptionApi:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            ApiId: 
              Ref: ApiGatewayApi

##################################################################################
  TwitterHourlyScheduler:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      CodeUri: dist/schedule/check_and_update/src
      Timeout: 900
      Events:
        ScheduleTrigger:
          Type: Schedule
          Properties:
            Schedule: 'rate(3 hours)'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  Healthcheck:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/public/healthcheck
      Runtime: nodejs16.x
      Timeout: 5
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /healthcheck
            Method: GET
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  GetAppUserApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/public/user/GET/src
      Runtime: nodejs16.x
      Timeout: 10
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/user
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  ListVictimsApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/public/victim/LIST/src
      Runtime: nodejs16.x
      Timeout: 10
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/list/victim
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  ListFollowingsApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/public/following/LIST/src
      Runtime: nodejs16.x
      Timeout: 100
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/list/following/{id}
            Method: get
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  PostVictimUserApi:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 256
      CodeUri: dist/public/victim/POST/src
      Runtime: nodejs16.x
      Timeout: 600
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/victim/{id}
            Method: post
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  DeleteVictimUserApi:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 256
      CodeUri: dist/public/victim/DELETE/src
      Runtime: nodejs16.x
      Timeout: 600
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/victim/{id}
            Method: delete
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  PrivateDeleteAllItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/private/delete_all_data_in_tables
      Runtime: nodejs16.x
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable

##################################################################################
  TelegramWebhook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/private/telegram_webhook/src
      Runtime: nodejs16.x
      Timeout: 10
      Events:
        GetChannelApiEvent:
          Type: HttpApi
          Properties:
            Path: /api/telegram/webhook
            Method: post
            ApiId: !Ref ApiGatewayApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingUserTable
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for DEV stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/DEV"

  Database:
    Description: "DynamoDB endpoint"
    Value: !Ref TrackingUserTable